#include "assert.H"
#include "exceptions.H"
#include "console.H"
#include "paging_low.H"
#include "page_table.H"

int register_check_legitimacy(VMPool **vm_pool, unsigned int _size, unsigned long page_addr, bool find_empty) {
    unsigned int num_null = 0;
    for (unsigned int i = 0; i < _size; i++)
    {	
	if (find_empty && vm_pool[i] == NULL)
		 return i;
	else if (vm_pool[i] == NULL)
		num_null += 1;
    	else if (vm_pool[i] != NULL){
		if (vm_pool[i]->is_legitimate(page_addr)) {
			return i;		
		}
        }
    }
    if (num_null == _size)
	return -2;
    return -1;
}


PageTable * PageTable::current_page_table = NULL;
unsigned int PageTable::paging_enabled = 0;
ContFramePool * PageTable::kernel_mem_pool = NULL;
ContFramePool * PageTable::process_mem_pool = NULL;
unsigned long PageTable::shared_size = 0;

void PageTable::init_paging(ContFramePool * _kernel_mem_pool,
                            ContFramePool * _process_mem_pool,
                            const unsigned long _shared_size)
{
    kernel_mem_pool = _kernel_mem_pool;
    process_mem_pool = _process_mem_pool;
    shared_size = _shared_size;
    Console::puts("Initialized Paging System\n");
}

PageTable::PageTable()
{
    if (page_directory == NULL) {
    	page_directory = (unsigned long*)(process_mem_pool->get_frames(1)*PAGE_SIZE);
	unsigned long *page_table = (unsigned long*)(process_mem_pool->get_frames(1)*PAGE_SIZE);
	unsigned long addr = 0;
	for (unsigned int i = 0; i < 1024; i++) {
		page_table[i] = addr | 3;
		addr += PAGE_SIZE;
	}
        page_directory[0] = (unsigned long) page_table | 3;
    }
    memset(&page_directory[1], 2, 1023);
  //  for (unsigned int i = 1; i < 1023; i++) 
	//page_directory[i] = 2;
    page_directory[1023] = (unsigned long)page_directory|3;
    
    for (unsigned int i = 0; i < VM_POOL_SIZE; i++) 
	vmpool_list[i] = NULL;	

    Console::puts("Constructed Page Table object\n");
}

void PageTable::load()
{
    current_page_table = this;
    write_cr3((unsigned long)page_directory);
    Console::puts("Loaded page table\n");
}

void PageTable::enable_paging()
{
    paging_enabled = 1;
    write_cr0(read_cr0() | 0x80000000);
    Console::puts("Enabled paging\n");
}

void PageTable::handle_fault(REGS * _r)
{
    //page in virtual memory mapped to page directory
    unsigned long *cur_page_directory = (unsigned long*) VIRTUAL_DIREC_ADDR;
    unsigned long *page_table;
    unsigned int int_no = _r->int_no;
    if (int_no != 14) {
	Console::puts("Not valid here!");
    }
    unsigned long page_addr = read_cr2();//read page address
    unsigned int page_table_index = page_addr>>22;
    unsigned int page_frame_index = ((page_addr>>12) & 0x3FF);
    int vm_index = register_check_legitimacy(current_page_table->vmpool_list, VM_POOL_SIZE, page_addr);

    Console::puts("Now the address is: "); Console::puti(page_addr); Console::puts("\n");
    if (vm_index == -1) {
	Console::puts("Invalid Page Address according to the virtual memory address space!\n");
        for(;;);
    }
    if ((cur_page_directory[page_table_index] & 1) != 1) {
	//allocate the page table address from process memory pool
        unsigned long frame_no = process_mem_pool->get_frames(1);
	Console::puts("Page table frame created with number: "); 
	Console::puti(frame_no);Console::puts("\n");
	cur_page_directory[page_table_index] = (unsigned long)(frame_no*PAGE_SIZE | 3);
	page_table = (unsigned long*)(VIRTUAL_TABLE_ADDR + (page_table_index<<12));// virtual address of page table start with wit 0xFFC00000, so we can get the address of of the page table by adding shift but ensuring last 12 bit 0
	//for (int i = 0; i < 1024; i++) page_table[i] = 2;
	memset(page_table, 2, 1024);
    }
    page_table = (unsigned long*)(VIRTUAL_TABLE_ADDR + (page_table_index<<12));
    unsigned long frame_no = process_mem_pool->get_frames(1);
    Console::puts("Page frame created with number: "); Console::puti(frame_no); Console::puts("\n");
    page_table[page_frame_index] = (unsigned long)(frame_no*PAGE_SIZE)|3;
    Console::puts("handled page fault\n");
}

void PageTable::register_pool(VMPool * _vm_pool)
{
    //assert(false);
    int vm_index = register_check_legitimacy(vmpool_list, VM_POOL_SIZE, 0, true);
    if (vm_index == -1) {
	Console::puts("The virtual pool is currently full, and you can not add more!");
 	for(;;);
     }
    vmpool_list[vm_index] = _vm_pool;
    Console::puts("registered VM pool\n");
}

void PageTable::free_page(unsigned long _page_no) {
   
    //assert(false); 
/*	
    unsigned int page_table_index = _page_no>>22;
    unsigned int page_frame_index = ((_page_no>>12) & 0x3FF);
    unsigned long *page_table = (unsigned long*)(VIRTUAL_TABLE_ADDR +(page_table_index<<12));
    if (page_table[page_frame_index] & 1) {
	    unsigned long first_frame_no = (page_table[page_frame_index])/PAGE_SIZE;
	    page_table[page_frame_index] = 2;
	    Console::puts("Page Frame to be freed is: "); 
	    Console::puti(first_frame_no); Console::puts("\n");
	    process_mem_pool->release_frames(first_frame_no);
    }
    unsigned int i = 0;
    for (i = 0; i < 1024; i++) if (page_table[i] & 1) break;
    if (i == 1024) {
	 unsigned long *cur_page_directory = (unsigned long*) VIRTUAL_DIREC_ADDR;
	 unsigned long page_no = (cur_page_directory[page_table_index] & VIRTUAL_DIREC_ADDR)/PAGE_SIZE;
	 cur_page_directory[page_table_index] = 2;
	 process_mem_pool->release_frames(page_no);
	 Console::puts("Page table frame to be freed is: ");Console::puti(page_no); Console::puts("\n");
    }
*/ 
    process_mem_pool->release_frames(_page_no);
    this->load();
    //Console::puts("freed page\n");
}
